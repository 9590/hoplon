(page "index.html")

(defn rand-item []
  (apply str (take 3 (repeatedly #(rand-int 9)))))

(defc items  (take 10 (repeatedly rand-item)))
(defc things ["one" "two"])
(defc foopc  "red")

(defn safe-pop [x] (try (pop x) (catch js/Error _)))

(defn more []
  (swap! items conj (rand-item)))

(defn less []
  (swap! items rest))

(defcomponent testy
  [{:keys [foop]} kids]
  (cell= (pr :foop foop))
  (do
    (div
      (h1 :css (cell= {:color foop}) "whoa")
      (ul
        (loop-tpl
          :bindings [[i kid] (cell= (map-indexed list kids))]
          (li :css (cell= {:color (if (odd? i) "orange" "orangered")}) kid))))))

(with-timeout 1000 (reset! foopc "blue"))
(with-timeout 2000 (swap! things conj "three"))
(with-timeout 3000 (swap! things assoc 0 "XXX"))
(with-timeout 4000 (swap! things (partial into ["ZZZ"])))

(html
  (head)
  (body
    :css {:color "yellowgreen"
          :font-family "monospace"
          :background-color "#002233"}
    (div
      :css {:margin "0px auto"
            :width "400px"}
      (h1 "hi")
      (hr :css {:border "0" :height "1px" :background "cadetblue"})
      (div
        :css {:text-align "center"}
        (button :click less "-1")
        (button :click more "+1"))
      (hr :css {:border "0" :height "1px" :background "cadetblue"})
      (ul
        (li "---oof---")
        (li ((testy
               :foop foopc
               :title "omg dude"
               :class "whewpz"
               (loop-tpl
                 :bindings [thing things]
                 (span thing)))
             :foop "gold"))
        (li "---omg---")
        (loop-tpl
          :bindings [item items]
          (li (span :text item)))
        (li "---pow---")))))
